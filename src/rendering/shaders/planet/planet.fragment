#version 120

uniform bool UseNightTexture;
uniform bool UseSpecMap;

uniform sampler2D Tex0; // Normal texture
uniform sampler2D Tex1; // Specular map
uniform sampler2D Tex3; // Night texture
//uniform sampler2D Tex2; // Bump map

varying vec2 TexCoord;

varying vec3 N, Ld, Eye;
varying float Dist;

const float twilightZone = 0.25;
const float invTwilightZone = 1.0 / (2.0 * twilightZone);

void
main()
{
  vec3 Normal = normalize(N);
  float NdotL = max(dot(Normal, Ld), 0.0);

  vec4 Ambient, AmbientGlob;

  vec4 diffuseTexel = texture2D(Tex0, TexCoord);
  vec4 diffuseNightTexel = texture2D(Tex3, TexCoord);
  vec4 diffuse = diffuseTexel * gl_LightSource[0].diffuse;
  vec4 diffuseNight = diffuseNightTexel * gl_LightSource[0].diffuse;

  // Ambient light
  AmbientGlob = gl_LightModel.ambient * diffuseNightTexel;
  Ambient = diffuseNightTexel * gl_LightSource[0].ambient;

  vec4 color = AmbientGlob;

  if (NdotL > 0.0) {
    float att = 1.0 / (gl_LightSource[0].constantAttenuation +
                      Dist * gl_LightSource[0].linearAttenuation +
                      Dist * Dist * gl_LightSource[0].quadraticAttenuation);

    color += att * (diffuse * NdotL + Ambient);
    float RdotE = max(dot(reflect(-Ld, Normal), normalize(Eye)), 0.0);

    //vec4 specColor = diffuseTexel;
    vec4 specColor = gl_FrontMaterial.specular;
    vec4 specIntensity = vec4(0.0,0.0,0.0,0.0);

    // Note: Grayscale spec map texture
    if (UseSpecMap && (texture2D(Tex1, TexCoord).r > 0.1) || !UseSpecMap) {
      specIntensity = gl_LightSource[0].specular *
                      pow(RdotE, gl_FrontMaterial.shininess);
    }

    color += att * specColor * specIntensity;
  }

  if (UseNightTexture) {
    // Mix day and night if we are in the twilight zone
    if (abs(NdotL) < twilightZone) {
      color = mix(diffuseNightTexel, color,
                  (NdotL+twilightZone) * invTwilightZone);
    }

    if (NdotL < -twilightZone) {
      // Override the global ambient value, we use a night texture
      color = diffuseNightTexel;
    }
  }

  gl_FragColor = color;
}
