#version 150

struct material_t {
  vec4 emission;
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;
  float shininess;
};

struct light_t {
  vec3 pos;
  vec4 ambient;
  vec4 specular;
  vec4 diffuse;
  vec3 dir; // Only used for spotlights
  
  float constantAttenuation;
  float linearAttenuation;
  float quadraticAttenuation;

  vec4 globAmbient;
};

uniform light_t oo_Light[1];
uniform material_t oo_Material;

uniform mat4 oo_ModelViewMatrix;
uniform mat4 oo_ProjectionMatrix;
uniform mat3 oo_NormalMatrix;

in vec3 oo_Vertex;
in vec3 oo_Normal;
in vec2 oo_TexCoord[1];

out vec4 Diffuse, Ambient, AmbientGlob;
out vec3 N, Ld, Eye;
out float Dist;

void
main()
{
  N = normalize(oo_NormalMatrix * oo_Normal);//gl_Normal);

  vec4 tmp = vec4(oo_Vertex.xyz, 1.0);
  vec3 Lv = vec3(oo_Light[0].pos - (oo_ModelViewMatrix * tmp).xyz);//gl_Vertex);
  Dist = length(Lv);
  Ld = normalize(Lv);
  Eye = -vec3(oo_ModelViewMatrix * tmp);//gl_Vertex);

  // Diffuse light
  float NdotL = max(dot(N, Ld), 0.0);
  Diffuse = (oo_Material.diffuse * oo_Light[0].diffuse) * NdotL;

  // Ambient light
  AmbientGlob = oo_Light[0].globAmbient * oo_Material.ambient;
  Ambient = oo_Material.ambient * oo_Light[0].ambient;

  //gl_FrontColor = Diffuse + Ambient + Spec;
  gl_Position = oo_ProjectionMatrix * oo_ModelViewMatrix * tmp;//gl_Vertex;
}
